{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["axios","defaults","baseURL","App","state","name","title","org","phone","email","qr_open","qr_placeholder","invite_url","onIssue","bizCard","console","log","post","then","response","setState","data","card","this","AppBar","position","Toolbar","style","backgroundColor","Typography","variant","flexGrow","Button","href","color","display","justifyContent","Paper","maxWidth","width","margin","padding","flexDirection","marginBottom","TextField","id","label","placeholder","value","onChange","e","target","onClick","Dialog","open","onClose","DialogTitle","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.83926d20.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport AppBar from '@material-ui/core/AppBar';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from \"@material-ui/core/es/Typography/Typography\";\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {TextField} from \"@material-ui/core\";\nimport axios from 'axios';\nimport QRcode from 'qrcode.react';\n\n// import logo from \"./\"; {/*add streetcred logo*/}\n\naxios.defaults.baseURL = 'http://localhost:3002/client/build/';\nexport class App extends Component {\n    state = {\n            name: \"\",\n            title: \"\",\n            org: \"\",\n            phone: \"\",\n            email: \"\",\n\n        qr_open: false,\n        qr_placeholder: \"\",\n        invite_url: \"\",\n    };\n\n    onIssue = () => {\n        const bizCard = {\n            name: this.state.name, \n            title: this.state.title,\n            org: this.state.org,\n            phone: this.state.phone,\n            email: this.state.email\n        }  \n        console.log(bizCard)\n        axios.post('/api/issue', bizCard).then((response) => {\n            console.log(response);\n            this.setState({invite_url: response.data.invite_url});\n        });\n        this.setState({\n          qr_open: true,\n          qr_placeholder: this.state,\n        })\n    }\n\n    render() {\n       const card = this.state\n      return (\n            \n            <div >\n                {/* The AppBar */}\n                <AppBar position=\"static\">\n                    <Toolbar style={{backgroundColor: '#812bff'}}>\n                        <img style={{}}/>\n                        <Typography variant=\"h6\"> \n                            Streetcred API Demo\n                        </Typography>\n                        <div style={{flexGrow: 1}}></div>\n                        <Button href=\"https://www.streetcred.id\" style={{color: 'white'}}>\n                            Streetcred\n                        </Button> \n                    </Toolbar>\n                </AppBar>\n\n                 {/* The Paper */}\n                 <div style={{display: 'flex', justifyContent: 'center'}}>\n                    <Paper style={{display: 'flex', maxWidth: '600px', width: '100%', margin: '40px', padding: 40}}>\n                        <div style={{display: 'flex', padding: '24px 24px', flexDirection: 'column', width: '100%'}}>\n                            <div style={{display: 'flex', marginBottom: '24px'}}>\n                                <Typography variant=\"h5\" style={{flexGrow: 1}}>\n                                    Create your Business Card Credential\n                                </Typography>\n                                \n                                \n                            </div>\n                            \n                            <TextField  \n                              id=\"name\"\n                              label=\"name\"\n                              placeholder={\"what's your name?\"}\n                              value={card.name}\n                              onChange={(e) => this.setState({name: e.target.value})}\n                              style={{marginBottom: '12px'}}\n                              />\n                            <TextField  \n                              id=\"title\"\n                              label=\"title\"\n                              placeholder={\"what's your title?\"} \n                              value={card.title}\n                              onChange={(e) => this.setState({title: e.target.value})}\n                              style={{marginBottom: '12px'}}\n                              />\n                            <TextField  \n                              id=\"org\"\n                              label=\"org\"\n                              placeholder={\"where do you work?\"} \n                              value={card.org}\n                              onChange={(e) => this.setState({org: e.target.value})}\n                              style={{marginBottom: '12px'}}\n                              />\n                            <TextField  \n                              id=\"phone\"\n                              label=\"phone\"\n                              placeholder={\"what's your #?\"} \n                              value={card.phone}\n                              onChange={(e) => this.setState({phone: e.target.value})}\n                              style={{marginBottom: '12px'}}\n                              />\n                            <TextField  \n                              id=\"email\"\n                              label=\"email\"\n                              placeholder={\"what's your email?\"} \n                              value={card.email}\n                              onChange={(e) => this.setState({email: e.target.value})}\n                              style={{marginBottom: '36px'}}\n                              />\n                            <Button   style={{backgroundColor: '#9b84ff'}}\n                                      onClick={() => this.onIssue()}>\n                                Issue Credential\n                            </Button>\n                        </div>\n                    </Paper>\n                </div>\n                <Dialog open={this.state.qr_open} onClose={() => this.setState({qr_open: false})}>\n                    <DialogTitle>Scan this QR code</DialogTitle>\n                    <QRcode value={this.state.invite_url} style={{margin: \"0 auto\"}} />\n                </Dialog>\n            </div>\n\n\n        )\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}